
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN COLON COMMA COMMENT DECIMAL DECLARE DIVIDE DO DOT DOUBLEGREATER DOUBLELESS ELSE END EQUAL FOR GREATER GREATEREQUAL ID IF INTEGER INTERROGATION LESS LESSEQUAL LESSGREATER LITERAL LPAREN MINUS MOD MULTI NOT NUMBER OR PLUS PROGRAM READ RPAREN SEMICOLON THEN TO TRIPLEGREATER TRIPLELESS WHILE WRITEprogram : PROGRAM ID bodybody : DECLARE declaration_list BEGIN statement_list ENDdeclaration_list : declaration declaration\n                            | declarationdeclaration : type identifier_list COMMA identifier_list SEMICOLON\n                | type identifier_list SEMICOLONtype : INTEGER \n                | DECIMALidentifier_list : ID COMMA identifier_list\n                            | ID statement_list : statement statement_prime\n\n                         statement_prime : statement\n                            | SEMICOLONstatement : assign_statement\n                    | if_statement\n                    | while_statement\n                    | for_statement\n                    | read_statement\n                    | write_statement\n                    | do_while_statement\n                    assign_statement : ID ASSIGN expressionif_statement : IF condition THEN statement_list END\n                        | IF condition THEN statement_list ELSE statement_list ENDwhile_statement : WHILE condition DO statement_list ENDdo_while_statement : DO statement_list WHILE condition ENDfor_statement : FOR assign_statement TO condition DO statement_list ENDread_statement : READ LPAREN ID RPARENwrite_statement : WRITE LPAREN writable RPARENwritable : simple_expression\n                        | literalcondition : expressionexpression : simple_expression\n                    | simple_expression relop simple_expressionrelop : EQUAL \n                | LESS \n                | LESSEQUAL \n                | GREATER \n                | GREATEREQUAL \n                | LESSGREATERsimple_expression : term\n                            | LPAREN simple_expression RPAREN INTERROGATION simple_expression COLON simple_expression\n                            | simple_expression addop term\n                            | simple_expression mulop term\n                            | LPAREN simple_expression RPAREN\n                       addop : PLUS \n                | MINUS \n                | ORmulop : MULTI \n                | DIVIDE \n                | MOD \n                | ANDterm : factor_a\n                | term mulop factor_afactor_a : factor \n                | NOT factor \n                | MINUS factorfactor : ID \n                | NUMBER \n                | LPAREN expression RPARENliteral : LITERAL'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,34,],[0,-1,-2,]),'ID':([2,8,9,10,11,16,17,18,19,20,21,22,23,25,26,27,28,31,33,38,41,42,43,44,45,46,47,48,49,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,79,80,81,82,83,91,92,93,94,95,96,100,101,102,103,104,105,106,107,111,112,113,114,],[3,14,-7,-8,24,24,-14,-15,-16,-17,-18,-19,-20,48,48,24,24,14,14,48,-32,-40,48,-52,-54,48,48,-57,-58,84,48,-21,24,48,48,48,-34,-35,-36,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,48,-55,48,-56,24,48,48,-33,-42,-43,-53,-44,-59,-27,-28,-22,24,48,-24,-25,24,-23,48,-26,-41,]),'DECLARE':([3,],[5,]),'INTEGER':([5,7,32,89,],[9,9,-6,-5,]),'DECIMAL':([5,7,32,89,],[10,10,-6,-5,]),'BEGIN':([6,7,12,32,89,],[11,-4,-3,-6,-5,]),'IF':([11,16,17,18,19,20,21,22,23,27,41,42,44,45,48,49,57,58,78,80,81,91,92,93,94,95,96,100,101,102,103,105,106,107,111,113,114,],[25,25,-14,-15,-16,-17,-18,-19,-20,25,-32,-40,-52,-54,-57,-58,-21,25,-55,-56,25,-33,-42,-43,-53,-44,-59,-27,-28,-22,25,-24,-25,25,-23,-26,-41,]),'WHILE':([11,16,17,18,19,20,21,22,23,27,35,36,37,41,42,44,45,48,49,51,57,58,78,80,81,91,92,93,94,95,96,100,101,102,103,105,106,107,111,113,114,],[26,26,-14,-15,-16,-17,-18,-19,-20,26,-12,-11,-13,-32,-40,-52,-54,-57,-58,82,-21,26,-55,-56,26,-33,-42,-43,-53,-44,-59,-27,-28,-22,26,-24,-25,26,-23,-26,-41,]),'FOR':([11,16,17,18,19,20,21,22,23,27,41,42,44,45,48,49,57,58,78,80,81,91,92,93,94,95,96,100,101,102,103,105,106,107,111,113,114,],[28,28,-14,-15,-16,-17,-18,-19,-20,28,-32,-40,-52,-54,-57,-58,-21,28,-55,-56,28,-33,-42,-43,-53,-44,-59,-27,-28,-22,28,-24,-25,28,-23,-26,-41,]),'READ':([11,16,17,18,19,20,21,22,23,27,41,42,44,45,48,49,57,58,78,80,81,91,92,93,94,95,96,100,101,102,103,105,106,107,111,113,114,],[29,29,-14,-15,-16,-17,-18,-19,-20,29,-32,-40,-52,-54,-57,-58,-21,29,-55,-56,29,-33,-42,-43,-53,-44,-59,-27,-28,-22,29,-24,-25,29,-23,-26,-41,]),'WRITE':([11,16,17,18,19,20,21,22,23,27,41,42,44,45,48,49,57,58,78,80,81,91,92,93,94,95,96,100,101,102,103,105,106,107,111,113,114,],[30,30,-14,-15,-16,-17,-18,-19,-20,30,-32,-40,-52,-54,-57,-58,-21,30,-55,-56,30,-33,-42,-43,-53,-44,-59,-27,-28,-22,30,-24,-25,30,-23,-26,-41,]),'DO':([11,16,17,18,19,20,21,22,23,27,40,41,42,44,45,48,49,50,57,58,78,80,81,91,92,93,94,95,96,99,100,101,102,103,105,106,107,111,113,114,],[27,27,-14,-15,-16,-17,-18,-19,-20,27,-31,-32,-40,-52,-54,-57,-58,81,-21,27,-55,-56,27,-33,-42,-43,-53,-44,-59,107,-27,-28,-22,27,-24,-25,27,-23,-26,-41,]),'COMMA':([13,14,56,],[31,33,-9,]),'SEMICOLON':([13,14,16,17,18,19,20,21,22,23,41,42,44,45,48,49,55,56,57,78,80,91,92,93,94,95,96,100,101,102,105,106,111,113,114,],[32,-10,37,-14,-15,-16,-17,-18,-19,-20,-32,-40,-52,-54,-57,-58,89,-9,-21,-55,-56,-33,-42,-43,-53,-44,-59,-27,-28,-22,-24,-25,-23,-26,-41,]),'END':([15,17,18,19,20,21,22,23,35,36,37,40,41,42,44,45,48,49,57,78,80,90,91,92,93,94,95,96,97,98,100,101,102,105,106,108,110,111,113,114,],[34,-14,-15,-16,-17,-18,-19,-20,-12,-11,-13,-31,-32,-40,-52,-54,-57,-58,-21,-55,-56,102,-33,-42,-43,-53,-44,-59,105,106,-27,-28,-22,-24,-25,111,113,-23,-26,-41,]),'ELSE':([17,18,19,20,21,22,23,35,36,37,41,42,44,45,48,49,57,78,80,90,91,92,93,94,95,96,100,101,102,105,106,111,113,114,],[-14,-15,-16,-17,-18,-19,-20,-12,-11,-13,-32,-40,-52,-54,-57,-58,-21,-55,-56,103,-33,-42,-43,-53,-44,-59,-27,-28,-22,-24,-25,-23,-26,-41,]),'ASSIGN':([24,],[38,]),'LPAREN':([25,26,29,30,38,43,46,47,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,82,83,104,112,],[43,43,53,54,43,43,79,79,43,43,79,79,-34,-35,-36,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,79,43,43,43,43,43,]),'NOT':([25,26,38,43,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,82,83,104,112,],[46,46,46,46,46,46,46,46,-34,-35,-36,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,46,46,46,46,46,46,]),'MINUS':([25,26,38,41,42,43,44,45,48,49,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,83,86,91,92,93,94,95,96,104,109,112,114,],[47,47,47,69,-40,47,-52,-54,-57,-58,47,47,47,47,-34,-35,-36,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,47,69,-55,47,-56,47,47,69,69,-42,-43,-53,-44,-59,47,69,47,69,]),'NUMBER':([25,26,38,43,46,47,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,79,82,83,104,112,],[49,49,49,49,49,49,49,49,49,49,-34,-35,-36,-37,-38,-39,-45,-46,-47,-48,-49,-50,-51,49,49,49,49,49,49,]),'THEN':([39,40,41,42,44,45,48,49,78,80,91,92,93,94,95,96,114,],[58,-31,-32,-40,-52,-54,-57,-58,-55,-56,-33,-42,-43,-53,-44,-59,-41,]),'TO':([41,42,44,45,48,49,52,57,78,80,91,92,93,94,95,96,114,],[-32,-40,-52,-54,-57,-58,83,-21,-55,-56,-33,-42,-43,-53,-44,-59,-41,]),'RPAREN':([41,42,44,45,48,49,76,77,78,80,84,85,86,87,88,91,92,93,94,95,96,114,],[-32,-40,-52,-54,-57,-58,95,96,-55,-56,100,101,-29,-30,-60,-33,-42,-43,-53,-44,-59,-41,]),'EQUAL':([41,42,44,45,48,49,76,78,80,92,93,94,95,96,114,],[62,-40,-52,-54,-57,-58,62,-55,-56,-42,-43,-53,-44,-59,-41,]),'LESS':([41,42,44,45,48,49,76,78,80,92,93,94,95,96,114,],[63,-40,-52,-54,-57,-58,63,-55,-56,-42,-43,-53,-44,-59,-41,]),'LESSEQUAL':([41,42,44,45,48,49,76,78,80,92,93,94,95,96,114,],[64,-40,-52,-54,-57,-58,64,-55,-56,-42,-43,-53,-44,-59,-41,]),'GREATER':([41,42,44,45,48,49,76,78,80,92,93,94,95,96,114,],[65,-40,-52,-54,-57,-58,65,-55,-56,-42,-43,-53,-44,-59,-41,]),'GREATEREQUAL':([41,42,44,45,48,49,76,78,80,92,93,94,95,96,114,],[66,-40,-52,-54,-57,-58,66,-55,-56,-42,-43,-53,-44,-59,-41,]),'LESSGREATER':([41,42,44,45,48,49,76,78,80,92,93,94,95,96,114,],[67,-40,-52,-54,-57,-58,67,-55,-56,-42,-43,-53,-44,-59,-41,]),'PLUS':([41,42,44,45,48,49,76,78,80,86,91,92,93,94,95,96,109,114,],[68,-40,-52,-54,-57,-58,68,-55,-56,68,68,-42,-43,-53,-44,-59,68,68,]),'OR':([41,42,44,45,48,49,76,78,80,86,91,92,93,94,95,96,109,114,],[70,-40,-52,-54,-57,-58,70,-55,-56,70,70,-42,-43,-53,-44,-59,70,70,]),'MULTI':([41,42,44,45,48,49,76,78,80,86,91,92,93,94,95,96,109,114,],[71,71,-52,-54,-57,-58,71,-55,-56,71,71,71,71,-53,-44,-59,71,71,]),'DIVIDE':([41,42,44,45,48,49,76,78,80,86,91,92,93,94,95,96,109,114,],[72,72,-52,-54,-57,-58,72,-55,-56,72,72,72,72,-53,-44,-59,72,72,]),'MOD':([41,42,44,45,48,49,76,78,80,86,91,92,93,94,95,96,109,114,],[73,73,-52,-54,-57,-58,73,-55,-56,73,73,73,73,-53,-44,-59,73,73,]),'AND':([41,42,44,45,48,49,76,78,80,86,91,92,93,94,95,96,109,114,],[74,74,-52,-54,-57,-58,74,-55,-56,74,74,74,74,-53,-44,-59,74,74,]),'COLON':([42,44,45,48,49,78,80,92,93,94,95,96,109,114,],[-40,-52,-54,-57,-58,-55,-56,-42,-43,-53,-44,-59,112,-41,]),'LITERAL':([54,],[88,]),'INTERROGATION':([95,],[104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body':([3,],[4,]),'declaration_list':([5,],[6,]),'declaration':([5,7,],[7,12,]),'type':([5,7,],[8,8,]),'identifier_list':([8,31,33,],[13,55,56,]),'statement_list':([11,27,58,81,103,107,],[15,51,90,97,108,110,]),'statement':([11,16,27,58,81,103,107,],[16,35,16,16,16,16,16,]),'assign_statement':([11,16,27,28,58,81,103,107,],[17,17,17,52,17,17,17,17,]),'if_statement':([11,16,27,58,81,103,107,],[18,18,18,18,18,18,18,]),'while_statement':([11,16,27,58,81,103,107,],[19,19,19,19,19,19,19,]),'for_statement':([11,16,27,58,81,103,107,],[20,20,20,20,20,20,20,]),'read_statement':([11,16,27,58,81,103,107,],[21,21,21,21,21,21,21,]),'write_statement':([11,16,27,58,81,103,107,],[22,22,22,22,22,22,22,]),'do_while_statement':([11,16,27,58,81,103,107,],[23,23,23,23,23,23,23,]),'statement_prime':([16,],[36,]),'condition':([25,26,82,83,],[39,50,98,99,]),'expression':([25,26,38,43,79,82,83,],[40,40,57,77,77,40,40,]),'simple_expression':([25,26,38,43,54,59,79,82,83,104,112,],[41,41,41,76,86,91,41,41,41,109,114,]),'term':([25,26,38,43,54,59,60,61,79,82,83,104,112,],[42,42,42,42,42,42,92,93,42,42,42,42,42,]),'factor_a':([25,26,38,43,54,59,60,61,75,79,82,83,104,112,],[44,44,44,44,44,44,44,44,94,44,44,44,44,44,]),'factor':([25,26,38,43,46,47,54,59,60,61,75,79,82,83,104,112,],[45,45,45,45,78,80,45,45,45,45,45,45,45,45,45,45,]),'relop':([41,76,],[59,59,]),'addop':([41,76,86,91,109,114,],[60,60,60,60,60,60,]),'mulop':([41,42,76,86,91,92,93,109,114,],[61,75,61,61,61,75,75,61,61,]),'writable':([54,],[85,]),'literal':([54,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID body','program',3,'p_program','yacc.py',16),
  ('body -> DECLARE declaration_list BEGIN statement_list END','body',5,'p_body','yacc.py',19),
  ('declaration_list -> declaration declaration','declaration_list',2,'p_declaration_list','yacc.py',22),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','yacc.py',23),
  ('declaration -> type identifier_list COMMA identifier_list SEMICOLON','declaration',5,'p_declaration','yacc.py',25),
  ('declaration -> type identifier_list SEMICOLON','declaration',3,'p_declaration','yacc.py',26),
  ('type -> INTEGER','type',1,'p_type','yacc.py',29),
  ('type -> DECIMAL','type',1,'p_type','yacc.py',30),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','yacc.py',33),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','yacc.py',34),
  ('statement_list -> statement statement_prime','statement_list',2,'p_statement_list','yacc.py',37),
  ('statement_prime -> statement','statement_prime',1,'p_statement_prime','yacc.py',41),
  ('statement_prime -> SEMICOLON','statement_prime',1,'p_statement_prime','yacc.py',42),
  ('statement -> assign_statement','statement',1,'p_statement','yacc.py',45),
  ('statement -> if_statement','statement',1,'p_statement','yacc.py',46),
  ('statement -> while_statement','statement',1,'p_statement','yacc.py',47),
  ('statement -> for_statement','statement',1,'p_statement','yacc.py',48),
  ('statement -> read_statement','statement',1,'p_statement','yacc.py',49),
  ('statement -> write_statement','statement',1,'p_statement','yacc.py',50),
  ('statement -> do_while_statement','statement',1,'p_statement','yacc.py',51),
  ('assign_statement -> ID ASSIGN expression','assign_statement',3,'p_assign_statement','yacc.py',55),
  ('if_statement -> IF condition THEN statement_list END','if_statement',5,'p_if_statement','yacc.py',58),
  ('if_statement -> IF condition THEN statement_list ELSE statement_list END','if_statement',7,'p_if_statement','yacc.py',59),
  ('while_statement -> WHILE condition DO statement_list END','while_statement',5,'p_while_statement','yacc.py',62),
  ('do_while_statement -> DO statement_list WHILE condition END','do_while_statement',5,'p_do_while_statement','yacc.py',65),
  ('for_statement -> FOR assign_statement TO condition DO statement_list END','for_statement',7,'p_for_statement','yacc.py',68),
  ('read_statement -> READ LPAREN ID RPAREN','read_statement',4,'p_read_statement','yacc.py',71),
  ('write_statement -> WRITE LPAREN writable RPAREN','write_statement',4,'p_write_statement','yacc.py',74),
  ('writable -> simple_expression','writable',1,'p_writable','yacc.py',76),
  ('writable -> literal','writable',1,'p_writable','yacc.py',77),
  ('condition -> expression','condition',1,'p_condition','yacc.py',79),
  ('expression -> simple_expression','expression',1,'p_expression','yacc.py',81),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','yacc.py',82),
  ('relop -> EQUAL','relop',1,'p_relop','yacc.py',84),
  ('relop -> LESS','relop',1,'p_relop','yacc.py',85),
  ('relop -> LESSEQUAL','relop',1,'p_relop','yacc.py',86),
  ('relop -> GREATER','relop',1,'p_relop','yacc.py',87),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','yacc.py',88),
  ('relop -> LESSGREATER','relop',1,'p_relop','yacc.py',89),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','yacc.py',92),
  ('simple_expression -> LPAREN simple_expression RPAREN INTERROGATION simple_expression COLON simple_expression','simple_expression',7,'p_simple_expression','yacc.py',93),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','yacc.py',94),
  ('simple_expression -> simple_expression mulop term','simple_expression',3,'p_simple_expression','yacc.py',95),
  ('simple_expression -> LPAREN simple_expression RPAREN','simple_expression',3,'p_simple_expression','yacc.py',96),
  ('addop -> PLUS','addop',1,'p_addop','yacc.py',100),
  ('addop -> MINUS','addop',1,'p_addop','yacc.py',101),
  ('addop -> OR','addop',1,'p_addop','yacc.py',102),
  ('mulop -> MULTI','mulop',1,'p_mulop','yacc.py',105),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','yacc.py',106),
  ('mulop -> MOD','mulop',1,'p_mulop','yacc.py',107),
  ('mulop -> AND','mulop',1,'p_mulop','yacc.py',108),
  ('term -> factor_a','term',1,'p_term','yacc.py',111),
  ('term -> term mulop factor_a','term',3,'p_term','yacc.py',112),
  ('factor_a -> factor','factor_a',1,'p_factor_a','yacc.py',115),
  ('factor_a -> NOT factor','factor_a',2,'p_factor_a','yacc.py',116),
  ('factor_a -> MINUS factor','factor_a',2,'p_factor_a','yacc.py',117),
  ('factor -> ID','factor',1,'p_factor','yacc.py',120),
  ('factor -> NUMBER','factor',1,'p_factor','yacc.py',121),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',122),
  ('literal -> LITERAL','literal',1,'p_literal','yacc.py',125),
]
