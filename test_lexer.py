import pytest
from ply.lex import LexToken
from lex import lexer



def test_lexer_teste1_type():
    with open('./lexer_tests/teste1.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'SEMICOLON',
        'INTEGER',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'NUMBER',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'LPAREN',
        'ID',
        'MULTI',
        'ID',
        'RPAREN',
        'DIVIDE',
        'LPAREN',
        'ID',
        'PLUS',
        'NUMBER',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'END',
    ]

    assert expected == result_test


def test_lexer_teste2_type():
    with open('./lexer_tests/teste2.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'ID',
        'INTEGER',
        'ID',
        'SEMICOLON',
        'INTEGER',
        'ID',
        'SEMICOLON',
        'INTEGER',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'ID',
        'MULTI',
        'ID',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'ID',
        'PLUS',
        'ID',
        'DIVIDE',
        'NUMBER',
        'MULTI',
        'LPAREN',
        'NUMBER',
        'PLUS',
        'NUMBER',
        'RPAREN',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'END',
        'SEMICOLON',
    ]

    assert expected == result_test


def test_lexer_teste3_type():
    with open('./lexer_tests/teste3.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'ID',
        'ASSIGN',
        'NUMBER',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'NUMBER',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'NUMBER',
        'SEMICOLON',
        'DO',
        'WRITE',
        'LPAREN',
        'ID',
        'COLON',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'ID',
        'ID',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'ID',
        'NUMBER',
        'SEMICOLON',
        'WHILE',
        'LPAREN',
        'ID',
        'GREATER',
        'NUMBER',
        'RPAREN',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'COLON',
        'RPAREN',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'DIVIDE',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'END',
    ]

    assert expected == result_test


def test_lexer_teste4_type():
    with open('./lexer_tests/teste4.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'ID',
        'ASSIGN',
        'NUMBER',
        'MULTI',
        'LPAREN',
        'NUMBER',
        'MINUS',
        'NUMBER',
        'RPAREN',
        'MULTI',
        'MINUS',
        'NUMBER',
        'DIVIDE',
        'NUMBER',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'ID',
        'MULTI',
        'NUMBER',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'ID',
        'MULTI',
        'ID',
        'DIVIDE',
        'ID',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'MINUS',
        'NUMBER',
        'PLUS',
        'NUMBER',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'END',
    ]

    assert expected == result_test


def test_lexer_teste5_type():
    with open('./lexer_tests/teste5.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'COMMA',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'IF',
        'LPAREN',
        'ID',
        'LESSGREATER',
        'NUMBER',
        'RPAREN',
        'ID',
        'ID',
        'ASSIGN',
        'ID',
        'DIVIDE',
        'ID',
        'ELSE',
        'ID',
        'ASSIGN',
        'NUMBER',
        'END',
        'END',
    ]

    assert expected == result_test


def test_lexer_teste6_type():
    with open('./lexer_tests/teste6.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'IF',
        'LPAREN',
        'ID',
        'GREATER',
        'ID',
        'AND',
        'ID',
        'GREATER',
        'ID',
        'RPAREN',
        'ID',
        'ID',
        'ASSIGN',
        'ID',
        'ELSE',
        'IF',
        'LPAREN',
        'ID',
        'GREATER',
        'ID',
        'RPAREN',
        'ID',
        'ID',
        'ASSIGN',
        'ID',
        'ELSE',
        'ID',
        'ASSIGN',
        'ID',
        'END',
        'END',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'END',
    ]

    assert expected == result_test


def test_lexer_teste7_type():
    with open('./lexer_tests/teste7.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'LPAREN',
        'ID',
        'GREATER',
        'ID',
        'AND',
        'ID',
        'GREATER',
        'ID',
        'RPAREN',
        'ID',
        'COLON',
        'LPAREN',
        'ID',
        'GREATER',
        'ID',
        'RPAREN',
        'ID',
        'COLON',
        'ID',
        'SEMICOLON',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'END',
    ]

    assert expected == result_test


def test_lexer_teste8_type():
    with open('./lexer_tests/teste8.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'IF',
        'LPAREN',
        'ID',
        'LESS',
        'NUMBER',
        'RPAREN',
        'ID',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'ELSE',
        'IF',
        'LPAREN',
        'ID',
        'GREATER',
        'NUMBER',
        'RPAREN',
        'ID',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'ELSE',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'END',
        'END',
        'SEMICOLON',
        'END',
    ]

    assert expected == result_test


def test_lexer_teste9_type():
    with open('./lexer_tests/teste9.txt', 'r') as arquivo:
        teste = arquivo.read()

    lexer_x = lexer()
    lexer_x.build()
    result_test = list(lexer_x.unit_test(teste))

    expected = [
        'PROGRAM',
        'ID',
        'DECLARE',
        'INTEGER',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'COMMA',
        'ID',
        'SEMICOLON',
        'BEGIN',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'ID',
        'ASSIGN',
        'LPAREN',
        'ID',
        'PLUS',
        'ID',
        'RPAREN',
        'DIVIDE',
        'NUMBER',
        'IF',
        'LPAREN',
        'ID',
        'GREATER',
        'NUMBER',
        'RPAREN',
        'ID',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'ELSE',
        'READ',
        'LPAREN',
        'ID',
        'RPAREN',
        'SEMICOLON',
        'IF',
        'LPAREN',
        'ID',
        'GREATER',
        'EQUAL',
        'ID',
        'RPAREN',
        'ID',
        'ID',
        'ASSIGN',
        'LPAREN',
        'ID',
        'PLUS',
        'ID',
        'RPAREN',
        'DIVIDE',
        'NUMBER',
        'IF',
        'LPAREN',
        'ID',
        'GREATER',
        'NUMBER',
        'RPAREN',
        'ID',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'ELSE',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'END',
        'ELSE',
        'ID',
        'ASSIGN',
        'LPAREN',
        'ID',
        'PLUS',
        'ID',
        'RPAREN',
        'DIVIDE',
        'NUMBER',
        'IF',
        'LPAREN',
        'ID',
        'GREATER',
        'NUMBER',
        'RPAREN',
        'ID',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'ELSE',
        'WRITE',
        'LPAREN',
        'ID',
        'RPAREN',
        'END',
        'END',
        'END',
        'END',
    ]

    assert expected == result_test
